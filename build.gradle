plugins {
	id 'org.springframework.boot' version '2.4.0-M3'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
  id 'com.github.node-gradle.node' version '2.2.0'
}

group = 'de.km-tech'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
  implementation 'org.springframework.boot:spring-boot-starter-mail'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-tomcat'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
  implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.springframework.session:spring-session-core'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}

// vvvvv for react vvvvv  KM 27.08.
task buildReactApp(type: NodeTask, dependsOn: 'npmInstall') {
    script = project.file('./node_modules/.bin/webpack')
    args = [
            '--mode', 'development',
            '--entry', './src/main/react/component/app.jsx',
            '-o', './src/main/resources/static/dist/react-app.js'
    ]
}

processResources.dependsOn 'buildReactApp'
clean.delete << file('node_modules')
clean.delete << file('src/main/resources/static/dist')

node {
  version = '12.16.2'
  npmVersion = '6.14.4'
  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory for NPM
  npmWorkDir = file("${project.buildDir}/npm")
}

task appNpmInstall(type: NpmTask) {
  description = "Installs all dependencies from package.json"
  workingDir = file("${project.projectDir}/src/main/react")
  args = ["install"]
}

task appNpmBuild(type: NpmTask) {
  description = "Builds production version of the react"
  workingDir = file("${project.projectDir}/src/main/react")
  args = ["run", "build"]
}

task copyWebApp(type: Copy) {
  from 'src/main/react/build'
  into 'build/resources/main/static/.'
}

task webpack(type: Exec) {
    inputs.file("package-lock.json") 
    inputs.dir("src/main/react/component/app.jsx")
    outputs.dir("src/main/resources/static/dist/react-app.js")

    commandLine "node_modules/.bin/webpack", "app/index.js", "$buildDir/js/bundle.js"
}
// ^^^^^ for react ^^^^^